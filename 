#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import yaml

from mlib import mlog
from mlib import mcmd
from mlib.mcommon import concat_dicts, datetimestr, usage, argspec
from dopy.manager import DoManager


defaultcfg="""---
mlog:
  enabled: true
  basicconfig:
    level: 10
    stream: sys.stdout
  fmt: default  # default | json
  patch:
    enabled: true
    style: json # plain | color | pretty | json
    targets:
    - [DoManager]
dopy:
  client_id: None
  api_key: "apikey"
  api_version: 2
"""

DoManager_help = usage(DoManager)

class Subcmd(object):

    converter_yml = """---
    regions: all_regions
    images: all_images
    actions: all_ations
    keys: all_ssh_keys
    ls: all_active_droplets
    """

    @classmethod
    def subcmds(cls):
        return Domanager_help.keys() + []

    def __init__(self):
        self.do = None

    def init_domanager(self, *args, **kwargs):
        self.do = DoManager(*args, **kwargs)


    def __getattr__(self, attrname):
        return getattr(self.do, attrname) 

def main(cfg):

    subcmd = Subcmd()
    subcmd.init_domanager(**cfg['dopy'])
    return Subcmd.__all__
    return getattr(subcmd, cfg['subcmd'])()
    #print '\n'.join(['{0:>40} {1:<40}'.format(k,v) for k,v in sorted(sorted(DoManager_help.items(),key=lambda x: x[0].split('_')[0]),key=lambda x: x[0].split('_')[-1])])
    converter = yaml.load(converter_yml)
    do = DoManager(**cfg['dopy'])
    subcmd = cfg['subcmd'] if not cfg['subcmd'] in converter else converter[cfg['subcmd']]

    if subcmd in ['all_regions', 'all_images', 'sizes', 'all_active_droplets','all_domains', 'all_actions', 'all_ssh_keys']:
        method = getattr(do, subcmd)
        return method()
    if subcmd in ['new_droplet']:
        method = getattr(do, subcmd)
        result = method(**concat_dicts([cfg['new_droplet'], cfg['parms']] ))
        return result
    if subcmd in ['destroy_droplet']:
        method = getattr(do, subcmd)
        return method(**cfg['parms'])


if __name__=='__main__':

    import os
    import sys
    myname = os.path.splitext(__file__)[0]

    defaultcfgfile =  '{0}.cfg'.format(myname) if os.path.exists('{0}.cfg'.format(myname)) else None

    subcmds = Subcmd.subcmds
 
    args = sys.argv[1:]
    strong_subcmd = None if len(args) < 1 or not args[0] in subcmds else args.pop(0)

    cfg = mcmd.get_cfgdict( [ defaultcfg , defaultcfgfile ] + args)
    if strong_subcmd : cfg['subcmd'] = strong_subcmd

    cfg['mlog']['basicconfig']['stream'] = "tmp/{0}.{1}".format(myname,datetimestr())
    mlog.logconfigure(cfg['mlog'], lambda x: globals()[x])
    main=mcmd.store_lastfunc(main, myname)

    result = main(cfg)
    print json.dumps(result)
